import streamlit as st

def display_chapter_navigation(prev_chapter=None, next_chapter=None):
    """
    Exibe bot√µes de navega√ß√£o para os cap√≠tulos anterior e pr√≥ximo.
    
    Args:
        prev_chapter (str, optional): Nome do cap√≠tulo anterior. None se for o primeiro cap√≠tulo.
        next_chapter (str, optional): Nome do cap√≠tulo seguinte. None se for o √∫ltimo cap√≠tulo.
    """
    st.markdown("---")
    cols = st.columns([1, 1, 1])
    
    with cols[0]:
        if prev_chapter:
            prev_url = f"/{prev_chapter}"
            st.markdown(f"[‚Üê Cap√≠tulo Anterior]({prev_url})")
    
    with cols[1]:
        st.markdown("[P√°gina Inicial](/)")
    
    with cols[2]:
        if next_chapter:
            next_url = f"/{next_chapter}"
            st.markdown(f"[Pr√≥ximo Cap√≠tulo ‚Üí]({next_url})")

def display_note(text):
    """
    Exibe uma nota destacada no estilo TDAH-friendly.
    
    Args:
        text (str): Texto da nota a ser exibida.
    """
    st.info(f"üìù **Nota**: {text}")

def display_tip(text):
    """
    Exibe uma dica destacada no estilo TDAH-friendly.
    
    Args:
        text (str): Texto da dica a ser exibida.
    """
    st.success(f"üí° **Dica**: {text}")

def display_warning(text):
    """
    Exibe um aviso destacado no estilo TDAH-friendly.
    
    Args:
        text (str): Texto do aviso a ser exibido.
    """
    st.warning(f"‚ö†Ô∏è **Aten√ß√£o**: {text}")

def display_encouragement():
    """
    Exibe uma mensagem de encorajamento aleat√≥ria.
    """
    import random
    
    messages = [
        "Voc√™ est√° indo muito bem! Continue assim!",
        "Um passo de cada vez. Voc√™ consegue!",
        "Est√° achando dif√≠cil? Fa√ßa uma pausa curta e volte com a mente renovada.",
        "Lembre-se: todos os programadores experientes j√° estiveram no seu lugar.",
        "Celebre cada pequena vit√≥ria! Cada conceito novo √© uma conquista.",
        "A pr√°tica leva √† perfei√ß√£o. Continue experimentando!",
        "Voc√™ est√° construindo habilidades valiosas. Tenha orgulho do seu progresso!",
        "Se algo n√£o faz sentido imediatamente, n√£o se preocupe. √Äs vezes precisamos ver v√°rias vezes."
    ]
    
    st.markdown(f"## üåü {random.choice(messages)}")

def display_break_reminder():
    """
    Exibe um lembrete para fazer uma pausa.
    """
    st.markdown("---")
    with st.expander("üßò Hora de uma pausa?"):
        st.markdown("""
        Se voc√™ est√° lendo h√° mais de 25-30 minutos, considere fazer uma pequena pausa:
        
        - Levante-se e estique o corpo
        - Beba um copo d'√°gua
        - Olhe para longe da tela por alguns minutos
        - Respire profundamente algumas vezes
        
        Depois, volte com a mente renovada!
        """)
    st.markdown("---")

def display_code_with_explanation(code, explanation, language="python"):
    """
    Exibe um bloco de c√≥digo com explica√ß√£o detalhada.
    
    Args:
        code (str): O c√≥digo a ser exibido.
        explanation (str): Explica√ß√£o do c√≥digo.
        language (str, optional): Linguagem do c√≥digo. Padr√£o: "python".
    """
    st.code(code, language=language)
    with st.expander("Explica√ß√£o detalhada", expanded=True):
        st.markdown(explanation)

def display_interactive_practice(instructions, solution_code, solution_explanation):
    """
    Exibe um exerc√≠cio interativo com instru√ß√µes e solu√ß√£o.
    
    Args:
        instructions (str): Instru√ß√µes para o exerc√≠cio.
        solution_code (str): C√≥digo da solu√ß√£o.
        solution_explanation (str): Explica√ß√£o da solu√ß√£o.
    """
    st.markdown("## üèãÔ∏è Exerc√≠cio Pr√°tico")
    st.markdown(instructions)
    
    user_code = st.text_area("Escreva seu c√≥digo aqui:", height=200)
    
    if st.button("Verificar solu√ß√£o"):
        with st.expander("Solu√ß√£o", expanded=True):
            st.code(solution_code, language="python")
            st.markdown("### Explica√ß√£o")
            st.markdown(solution_explanation)
