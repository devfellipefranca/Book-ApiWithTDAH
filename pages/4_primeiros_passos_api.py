import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder, display_interactive_practice
from utils.code_examples import FLASK_HELLO_WORLD, FASTAPI_HELLO_WORLD

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Primeiros Passos com APIs | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("4. Primeiros Passos com APIs")

    st.markdown("""
    Chegou o momento que voc√™ estava esperando! Neste cap√≠tulo, vamos criar nossa primeira API.
    Vamos come√ßar com algo simples e, ao longo do livro, iremos expandir esse conhecimento.

    Voc√™ ver√° que criar uma API b√°sica √© mais f√°cil do que parece!
    """)

    # Se√ß√£o 1: Frameworks para APIs em Python
    st.markdown("## 4.1. Frameworks para APIs em Python")

    st.markdown("""
    Para criar APIs em Python, usamos **frameworks** - bibliotecas que fornecem ferramentas
    e estruturas para facilitar o desenvolvimento. Os mais populares s√£o:

    ### Flask

    **Flask** √© um microframework leve e flex√≠vel. √â √≥timo para come√ßar porque:
    - √â simples e f√°cil de aprender
    - Tem uma curva de aprendizado suave
    - Oferece apenas o essencial, deixando voc√™ escolher as extens√µes que precisar

    ### FastAPI

    **FastAPI** √© um framework mais recente, focado em alto desempenho:
    - √â extremamente r√°pido
    - Tem valida√ß√£o autom√°tica de dados
    - Gera documenta√ß√£o automaticamente
    - Suporta opera√ß√µes ass√≠ncronas

    ### Django Rest Framework

    Baseado no Django, √© uma solu√ß√£o mais completa:
    - Oferece muitas funcionalidades prontas
    - Ideal para projetos maiores e mais complexos
    - Tem uma curva de aprendizado mais acentuada

    **Neste livro, usaremos Flask** para os exemplos porque:
    1. √â mais simples para iniciantes
    2. Permite entender o que est√° acontecendo "por baixo do cap√¥"
    3. Os conceitos aprendidos s√£o transfer√≠veis para outros frameworks

    No entanto, tamb√©m mencionaremos FastAPI ocasionalmente, j√° que ele est√° ganhando
    popularidade rapidamente.
    """)

    display_note("Embora existam v√°rios frameworks, a escolha entre eles muitas vezes se resume √† prefer√™ncia pessoal e ao caso de uso espec√≠fico. O importante √© que os conceitos fundamentais das APIs s√£o os mesmos independentemente do framework.")

    # Se√ß√£o 2: Instalando as ferramentas necess√°rias
    st.markdown("## 4.2. Instalando as ferramentas necess√°rias")

    st.markdown("""
    Antes de come√ßarmos a codificar, precisamos configurar nosso ambiente. Se voc√™ j√° tem Python
    instalado, esse processo ser√° bem simples!

    ### Instalando o Flask

    Abra o terminal (ou prompt de comando no Windows) e execute:

    ```
    pip install flask
    ```

    Se voc√™ quiser tamb√©m experimentar o FastAPI mais tarde:

    ```
    pip install fastapi uvicorn
    ```

    O `uvicorn` √© um servidor ASGI (Asynchronous Server Gateway Interface) que o FastAPI usa.

    ### Verificando a instala√ß√£o

    Para confirmar que tudo est√° funcionando, voc√™ pode criar um arquivo Python simples e
    importar o Flask:

    ```python
    from flask import Flask

    print("Flask importado com sucesso!")
    ```

    Se executar este arquivo sem erros, significa que o Flask est√° instalado corretamente.
    """)

    display_tip("Se voc√™ estiver usando um ambiente virtual (o que √© recomendado para projetos Python), n√£o se esque√ßa de ativ√°-lo antes de instalar as bibliotecas!")

    # Pausa para reflex√£o
    display_encouragement()

    # Se√ß√£o 3: Nossa primeira API "Hello World"
    st.markdown("## 4.3. Nossa primeira API: 'Hello World'")

    st.markdown("""
    Vamos criar nossa primeira API! Ser√° um simples "Hello World" para entendermos os conceitos b√°sicos.

    ### Usando Flask
    """)

    display_code_with_explanation(
        FLASK_HELLO_WORLD,
        """
        Vamos analisar este c√≥digo linha por linha:

        1. `from flask import Flask` - Importamos a classe Flask, que √© o cora√ß√£o do framework

        2. `app = Flask(__name__)` - Criamos uma inst√¢ncia da aplica√ß√£o Flask
           - `__name__` √© uma vari√°vel especial em Python que cont√©m o nome do m√≥dulo atual
           - Isso ajuda o Flask a encontrar recursos associados √† aplica√ß√£o

        3. `@app.route("/")` - Este √© um **decorador** que associa a URL "/" √† fun√ß√£o que vem logo ap√≥s
           - A URL "/" representa a rota raiz da sua API (como "https://minha-api.com/")
           - Quando algu√©m acessar essa URL, o Flask chamar√° a fun√ß√£o `hello_world()`

        4. `def hello_world():` - Esta fun√ß√£o ser√° executada quando a rota "/" for acessada
           - Ela retorna um dicion√°rio `{"mensagem": "Ol√°, Mundo! Esta √© minha primeira API!"}`
           - O Flask automaticamente converte este dicion√°rio em JSON para a resposta

        5. `if __name__ == "__main__":` - Esta parte s√≥ executa quando rodamos o arquivo diretamente
           - `app.run(debug=True, host="0.0.0.0", port=8000)` inicia o servidor
           - `debug=True` habilita o modo de desenvolvimento (recarrega ao modificar o c√≥digo)
           - `host="0.0.0.0"` permite acesso de qualquer endere√ßo
           - `port=8000` define a porta onde o servidor estar√° dispon√≠vel

        Quando executado, este c√≥digo inicia um servidor web que pode receber requisi√ß√µes HTTP.
        Quando algu√©m acessa a URL raiz ("/"), o servidor responde com o JSON: `{"mensagem": "Ol√°, Mundo! Esta √© minha primeira API!"}`
        """
    )

    st.markdown("""
    ### Usando FastAPI

    Para compara√ß√£o, assim seria a mesma API usando FastAPI:
    """)

    display_code_with_explanation(
        FASTAPI_HELLO_WORLD,
        """
        Este c√≥digo faz exatamente a mesma coisa que o exemplo do Flask, mas usando FastAPI:

        1. `from fastapi import FastAPI` - Importamos a classe FastAPI

        2. `import uvicorn` - Importamos o servidor ASGI que executar√° nossa aplica√ß√£o

        3. `app = FastAPI()` - Criamos uma inst√¢ncia da aplica√ß√£o FastAPI

        4. `@app.get("/")` - Este decorador associa a URL "/" com o m√©todo HTTP GET √† fun√ß√£o abaixo
           - Note que o FastAPI especifica o m√©todo HTTP diretamente no decorador

        5. `def hello_world():` - A fun√ß√£o que ser√° executada, assim como no Flask

        6. `uvicorn.run(app, host="0.0.0.0", port=8000)` - Inicia o servidor usando o Uvicorn

        A grande diferen√ßa √© que o FastAPI:
        - √â mais expl√≠cito sobre os m√©todos HTTP
        - Usa um servidor ASGI (Uvicorn) que √© mais r√°pido
        - Gera automaticamente documenta√ß√£o (acess√≠vel em "/docs" quando o servidor est√° rodando)
        """
    )

    # Lembrete para pausa
    display_break_reminder()

    # Se√ß√£o 4: Executando e testando sua primeira API
    st.markdown("## 4.4. Executando e testando sua primeira API")

    st.markdown("""
    Vamos aprender como executar e testar nossa API rec√©m-criada.

    ### Executando a API

    1. Salve o c√≥digo em um arquivo (por exemplo, `app.py`)

    2. Abra o terminal na pasta onde salvou o arquivo

    3. Execute o comando:

    ```
    python app.py
    ```
    """)

if __name__ == "__main__":
    main()