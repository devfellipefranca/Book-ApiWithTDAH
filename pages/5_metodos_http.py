import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder, display_interactive_practice
from utils.code_examples import HTTP_METHODS_FLASK

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="M√©todos HTTP | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("5. M√©todos HTTP")

    st.markdown("""
    At√© agora, criamos APIs simples que apenas retornam informa√ß√µes. No entanto, uma API completa
    precisa permitir v√°rias opera√ß√µes: criar, ler, atualizar e excluir dados (conhecido como CRUD).
    

    Para fazer isso, utilizamos diferentes **m√©todos HTTP** (tamb√©m chamados de verbos HTTP).
    Neste cap√≠tulo, vamos entender o que s√£o esses m√©todos e como implement√°-los em nossas APIs.
    """)

    # Se√ß√£o 1: O que s√£o M√©todos HTTP
    st.markdown("## 5.1. O que s√£o M√©todos HTTP?")

    st.markdown("""
    Os **m√©todos HTTP** s√£o verbos que indicam a a√ß√£o que uma requisi√ß√£o deseja realizar 
    em um recurso. Pense neles como os verbos da "linguagem da web".

    ### Analogia com uma biblioteca f√≠sica

    Para entender melhor, imagine uma biblioteca:

    - **GET** √© como consultar um livro sem retir√°-lo
    - **POST** √© como adicionar um novo livro √† biblioteca
    - **PUT** √© como substituir um livro por uma nova edi√ß√£o
    - **PATCH** √© como corrigir algumas p√°ginas de um livro
    - **DELETE** √© como remover um livro do acervo

    ### Os principais m√©todos HTTP

    1. **GET**: Solicita a leitura de um recurso
       - N√£o deve alterar nada no servidor
       - Pode ser cacheado (armazenado temporariamente)
       - As informa√ß√µes s√£o enviadas na URL

    2. **POST**: Solicita a cria√ß√£o de um novo recurso
       - Causa uma mudan√ßa no servidor
       - N√£o √© idempotente (chamar v√°rias vezes causa m√∫ltiplas cria√ß√µes)
       - Os dados s√£o enviados no corpo da requisi√ß√£o

    3. **PUT**: Solicita a substitui√ß√£o completa de um recurso
       - Causa uma mudan√ßa no servidor
       - √â idempotente (chamar v√°rias vezes tem o mesmo efeito que chamar uma vez)
       - Os dados s√£o enviados no corpo da requisi√ß√£o

    4. **PATCH**: Solicita a atualiza√ß√£o parcial de um recurso
       - Causa uma mudan√ßa no servidor
       - Atualiza apenas os campos informados, mantendo o resto
       - Os dados s√£o enviados no corpo da requisi√ß√£o

    5. **DELETE**: Solicita a remo√ß√£o de um recurso
       - Causa uma mudan√ßa no servidor
       - √â idempotente (chamar v√°rias vezes tem o mesmo efeito)
       - Geralmente n√£o cont√©m corpo na requisi√ß√£o
    """)

    display_note("Em APIs REST, combinamos os m√©todos HTTP com URLs para criar um sistema intuitivo. Por exemplo, uma API de biblioteca poderia ter: GET /livros (listar livros), POST /livros (adicionar livro), PUT /livros/123 (atualizar livro 123), DELETE /livros/123 (remover livro 123).")

    # Se√ß√£o 2: O Padr√£o CRUD em APIs
    st.markdown("## 5.2. O Padr√£o CRUD em APIs")

    st.markdown("""
    CRUD √© um acr√¥nimo para as quatro opera√ß√µes b√°sicas que podem ser realizadas em dados persistentes:

    - **C**reate (Criar)
    - **R**ead (Ler)
    - **U**pdate (Atualizar)
    - **D**elete (Excluir)

    Na arquitetura REST, mapeamos estas opera√ß√µes para m√©todos HTTP:

    | Opera√ß√£o CRUD | M√©todo HTTP | Descri√ß√£o                                   |
    |---------------|-------------|---------------------------------------------|
    | **Create**    | POST        | Cria um novo recurso                        |
    | **Read**      | GET         | Obt√©m um ou mais recursos                   |
    | **Update**    | PUT/PATCH   | Atualiza um recurso existente              |
    | **Delete**    | DELETE      | Remove um recurso                           |

    ### Exemplo com uma API de tarefas:

    1. **Create**: `POST /tarefas`
       - Cria uma nova tarefa
       - Corpo da requisi√ß√£o: `{"titulo": "Estudar Python", "concluida": false}`

    2. **Read**:
       - `GET /tarefas` - Lista todas as tarefas
       - `GET /tarefas/42` - Obt√©m detalhes da tarefa com ID 42

    3. **Update**:
       - `PUT /tarefas/42` - Substitui completamente a tarefa 42
         - Corpo: `{"titulo": "Estudar APIs", "concluida": true}`
       - `PATCH /tarefas/42` - Atualiza apenas campos espec√≠ficos
         - Corpo: `{"concluida": true}`

    4. **Delete**: `DELETE /tarefas/42`
       - Remove a tarefa com ID 42

    Este padr√£o torna as APIs previs√≠veis e f√°ceis de entender.
    """)

    # Pausa para reflex√£o
    display_encouragement()

    # Se√ß√£o 3: Implementando M√©todos HTTP no Flask
    st.markdown("## 5.3. Implementando M√©todos HTTP no Flask")

    st.markdown("""
    Vamos implementar uma API completa com todos os m√©todos HTTP usando Flask.
    Ser√° uma API de lista de tarefas que permite criar, listar, atualizar e excluir tarefas.
    """)

    display_code_with_explanation(
        HTTP_METHODS_FLASK,
        """
        Este √© um exemplo completo de uma API REST para gerenciar tarefas. Vamos analisar cada parte:

        1. **Configura√ß√£o Inicial**:
           - Importamos as classes necess√°rias do Flask
           - Criamos uma inst√¢ncia da aplica√ß√£o
           - Definimos uma lista para armazenar as tarefas (simula um banco de dados)

        2. **Rota GET para listar todas as tarefas** (`/tarefas`):
           - `@app.route("/tarefas", methods=["GET"])` - Esta rota aceita apenas o m√©todo GET
           - A fun√ß√£o `obter_tarefas()` retorna a lista completa de tarefas
           - `jsonify()` converte a lista Python para JSON

        3. **Rota GET para obter uma tarefa espec√≠fica** (`/tarefas/<int:tarefa_id>`):
           - O `<int:tarefa_id>` na URL captura o ID da tarefa como um n√∫mero inteiro
           - Usamos uma express√£o geradora com `next()` para encontrar a tarefa pelo ID
           - Se a tarefa for encontrada, retornamos seus detalhes
           - Se n√£o, retornamos um erro 404 (Not Found)

        4. **Rota POST para criar uma tarefa** (`/tarefas`):
           - `@app.route("/tarefas", methods=["POST"])` - Esta rota aceita apenas o m√©todo POST
           - `request.json` obt√©m os dados enviados no corpo da requisi√ß√£o
           - Verificamos se os dados s√£o v√°lidos (se cont√™m um t√≠tulo)
           - Criamos uma nova tarefa com um ID gerado automaticamente
           - Retornamos a tarefa criada com c√≥digo 201 (Created)

        5. **Rota PUT para atualizar uma tarefa** (`/tarefas/<int:tarefa_id>`):
           - `@app.route("/tarefas/<int:tarefa_id>", methods=["PUT"])` - Aceita apenas PUT
           - Buscamos a tarefa existente pelo ID
           - Atualizamos seus campos com os novos valores
           - Retornamos a tarefa atualizada

        6. **Rota DELETE para remover uma tarefa** (`/tarefas/<int:tarefa_id>`):
           - `@app.route("/tarefas/<int:tarefa_id>", methods=["DELETE"])` - Aceita apenas DELETE
           - Armazenamos o tamanho inicial da lista
           - Filtramos a lista para remover a tarefa com o ID especificado
           - Verificamos se o tamanho mudou para saber se a tarefa foi removida
           - Retornamos uma mensagem de sucesso ou erro 404

        Esta API segue os princ√≠pios RESTful:
        - Usa substantivos plurais para recursos (`/tarefas`)
        - Usa IDs para identificar recursos espec√≠ficos (`/tarefas/42`)
        - Aplica os m√©todos HTTP apropriados para cada opera√ß√£o
        - Retorna c√≥digos de status HTTP apropriados (200, 201, 404, etc.)
        - Fornece respostas consistentes em formato JSON
        """
    )

    # Lembrete para pausa
    display_break_reminder()

    # Se√ß√£o 4: C√≥digos de Status HTTP
    st.markdown("## 5.4. C√≥digos de Status HTTP")

    st.markdown("""
    Os **c√≥digos de status HTTP** s√£o n√∫meros de tr√™s d√≠gitos que indicam o resultado de uma requisi√ß√£o.
    Usar c√≥digos corretos √© essencial para que os clientes entendam o que aconteceu com sua solicita√ß√£o.

    ### Categorias principais

    1. **1xx - Informacional**
       - Raramente usados diretamente em APIs
       - Indicam que a requisi√ß√£o foi recebida e est√° sendo processada

    2. **2xx - Sucesso**
       - **200 OK**: Requisi√ß√£o bem-sucedida
       - **201 Created**: Recurso criado com sucesso
       - **204 No Content**: Sucesso, mas sem conte√∫do para retornar

    3. **3xx - Redirecionamento**
       - Raramente usados em APIs modernas
       - Indicam que o cliente precisa tomar uma a√ß√£o adicional

    4. **4xx - Erro do Cliente**
       - **400 Bad Request**: Requisi√ß√£o malformada ou inv√°lida
       - **401 Unauthorized**: Autentica√ß√£o necess√°ria
       - **403 Forbidden**: Sem permiss√£o para acessar o recurso
       - **404 Not Found**: Recurso n√£o encontrado
       - **422 Unprocessable Entity**: Dados v√°lidos mas semanticamente incorretos

    5. **5xx - Erro do Servidor**
       - **500 Internal Server Error**: Erro n√£o tratado no servidor
       - **503 Service Unavailable**: Servidor temporariamente indispon√≠vel

    ### C√≥digos mais comuns em APIs REST

    | M√©todo | Sucesso | Erro Comum |
    |--------|---------|------------|
    | GET    | 200 OK  | 404 Not Found |
    | POST   | 201 Created | 400 Bad Request |
    | PUT    | 200 OK | 404 Not Found, 400 Bad Request |
    | DELETE | 200 OK ou 204 No Content | 404 Not Found |

    ### Implementando no Flask

    No Flask, √© f√°cil retornar c√≥digos de status diferentes:

    ```python
    # Sucesso - c√≥digo 200 (padr√£o)
    return jsonify({"mensagem": "Opera√ß√£o bem-sucedida"})

    # Cria√ß√£o - c√≥digo 201
    return jsonify(novo_recurso), 201

    # Erro do cliente - c√≥digo 400
    return jsonify({"erro": "Dados inv√°lidos"}), 400

    # Recurso n√£o encontrado - c√≥digo 404
    return jsonify({"erro": "Usu√°rio n√£o encontrado"}), 404

    # Erro interno - c√≥digo 500
    return jsonify({"erro": "Erro inesperado"}), 500
    ```
    """)

    display_tip("Sempre retorne c√≥digos de status HTTP apropriados! Eles ajudam os clientes a entender o resultado da requisi√ß√£o e a tratar erros adequadamente. Uma API que sempre retorna 200 mesmo em caso de erro √© confusa e dif√≠cil de usar.")

    # Se√ß√£o 5: Testando os Diferentes M√©todos HTTP
    st.markdown("## 5.5. Testando os Diferentes M√©todos HTTP")

    st.markdown("""
    Diferentemente do m√©todo GET, os outros m√©todos HTTP n√£o podem ser facilmente testados
    usando apenas o navegador. Vamos ver como testar cada m√©todo:

    ### 1. Usando o Postman (Recomendado)

    O Postman √© a ferramenta mais popular para testar APIs:

    1. **Para GET**:
       - Selecione o m√©todo GET
       - Digite a URL (ex: `http://localhost:8000/tarefas`)
       - Clique em "Send"

    2. **Para POST**:
       - Selecione o m√©todo POST
       - Digite a URL (ex: `http://localhost:8000/tarefas`)
       - V√° para a aba "Body"
       - Selecione "raw" e "JSON"
       - Digite o corpo da requisi√ß√£o, como:
         ```json
         {
             "titulo": "Aprender sobre APIs",
             "concluida": false
         }
         ```
    """)

if __name__ == "__main__":
    main()