import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder, display_interactive_practice
from utils.code_examples import API_VALIDATION_SECURITY

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Valida√ß√£o e Seguran√ßa | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("8. Valida√ß√£o e Seguran√ßa")

    st.markdown("""
    A seguran√ßa √© um aspecto cr√≠tico no desenvolvimento de APIs. Neste cap√≠tulo, 
    vamos aprender como proteger nossas APIs atrav√©s de valida√ß√£o de
    dados e implementa√ß√£o de medidas de seguran√ßa b√°sicas.
    """)

    # Se√ß√£o 1: A import√¢ncia da seguran√ßa em APIs
    st.markdown("## 8.1. A import√¢ncia da seguran√ßa em APIs")

    st.markdown("""
    Quando criamos uma API, estamos essencialmente abrindo uma porta para o mundo exterior
    acessar nossos dados e funcionalidades. Sem as devidas prote√ß√µes, essa porta pode ser
    usada de formas maliciosas:

    ### Riscos comuns em APIs:

    1. **Acesso n√£o autorizado**: Pessoas acessando dados que n√£o deveriam
    2. **Inje√ß√£o de c√≥digo**: Inser√ß√£o de c√≥digo malicioso atrav√©s de inputs n√£o validados
    3. **Sobrecarga de servidor**: Bombardeamento de requisi√ß√µes para derrubar o servi√ßo
    4. **Exposi√ß√£o de dados sens√≠veis**: Vazamento de informa√ß√µes confidenciais
    5. **Manipula√ß√£o de dados**: Altera√ß√£o n√£o autorizada de informa√ß√µes

    ### Exemplos de incidentes reais:

    - Em 2019, a **First American Financial Corp** exp√¥s 885 milh√µes de registros sens√≠veis devido a uma falha em sua API
    - A **Equifax** sofreu um vazamento de dados que afetou 147 milh√µes de pessoas devido a falhas de seguran√ßa
    - A **Facebook** teve dados de 50 milh√µes de usu√°rios expostos devido a vulnerabilidades em sua API Graph

    ### Por que a seguran√ßa √© frequentemente negligenciada?

    1. Press√£o por entregas r√°pidas
    2. Falta de conhecimento sobre riscos
    3. Percep√ß√£o de que "ningu√©m vai atacar minha pequena API"

    A verdade √© que at√© mesmo APIs pequenas s√£o alvos, muitas vezes de forma automatizada por bots que varrem a internet em busca de vulnerabilidades.
    """)

    display_warning("Nunca pense 'minha API √© pequena/simples demais para ser atacada'. Ataques automatizados n√£o discriminam por tamanho - eles simplesmente procuram vulnerabilidades conhecidas.")

    # Se√ß√£o 2: Valida√ß√£o de Dados
    st.markdown("## 8.2. Valida√ß√£o de Dados")

    st.markdown("""
    A valida√ß√£o de dados √© a primeira linha de defesa. Nunca confie em dados enviados pelo cliente!

    ### Por que validar dados?

    1. **Seguran√ßa**: Previne inje√ß√£o de c√≥digo malicioso
    2. **Integridade**: Garante que os dados est√£o no formato esperado
    3. **Consist√™ncia**: Mant√©m a qualidade e uniformidade dos dados

    ### Tipos de valida√ß√£o
    #### 1. Valida√ß√£o de Tipo
    Verifica se o dado √© do tipo esperado (string, n√∫mero, booleano, etc.):

    ```python
    # Validando tipo de dados
    def validar_idade(idade):
        if not isinstance(idade, int):
            return False, "Idade deve ser um n√∫mero inteiro"
        return True, ""
    ```

    #### 2. Valida√ß√£o de Formato
    Verifica se o dado segue um padr√£o espec√≠fico (email, telefone, CEP):

    ```python
    import re

    # Validando formato de email
    def validar_email(email):
        padrao = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(padrao, email):
            return False, "Formato de email inv√°lido"
        return True, ""
    ```

    #### 3. Valida√ß√£o de Tamanho/Limite
    Verifica se o dado est√° dentro de limites aceit√°veis:

    ```python
    # Validando tamanho de senha
    def validar_senha(senha):
        if len(senha) < 8:
            return False, "Senha deve ter no m√≠nimo 8 caracteres"
        return True, ""
    ```

    #### 4. Valida√ß√£o de Conte√∫do
    Verifica se o conte√∫do √© aceit√°vel:

    ```python
    # Validando valor dentro de op√ß√µes aceitas
    def validar_categoria(categoria):
        categorias_validas = ["tecnologia", "sa√∫de", "educa√ß√£o", "finan√ßas"]
        if categoria not in categorias_validas:
            return False, "Categoria inv√°lida"
        return True, ""
    ```

    #### 5. Valida√ß√£o de Presen√ßa
    Verifica se campos obrigat√≥rios est√£o presentes:

    ```python
    # Validando campos obrigat√≥rios
    def validar_campos_obrigatorios(dados, campos):
        for campo in campos:
            if campo not in dados or not dados[campo]:
                return False, f"Campo obrigat√≥rio ausente: {campo}"
        return True, ""
    ```

    ### Sanitiza√ß√£o de Dados
    Al√©m de validar, √© importante sanitizar dados para remover conte√∫do potencialmente perigoso:

    ```python
    import html

    # Sanitizando HTML para prevenir XSS
    def sanitizar_texto(texto):
        return html.escape(texto)

    # Sanitizando entrada para prevenir inje√ß√£o SQL
    def sanitizar_input_sql(input_texto):
        # Exemplo simples - em produ√ß√£o use bibliotecas especializadas ou ORM!
        return input_texto.replace("'", "''")
    ```
    """)

    display_tip("Uma boa abordagem √© 'validar na entrada, sanitizar na sa√≠da'. Valide rigorosamente o que entra na sua API e sanitize tudo que sai dela. Isso cria duas camadas de prote√ß√£o.")

    # Pausa para reflex√£o
    display_encouragement()

    # Se√ß√£o 3: Autentica√ß√£o e Autoriza√ß√£o
    st.markdown("## 8.3. Autentica√ß√£o e Autoriza√ß√£o")

    st.markdown("""
    Autentica√ß√£o e autoriza√ß√£o s√£o fundamentais para controlar o acesso √† sua API.

    ### Autentica√ß√£o vs Autoriza√ß√£o

    - **Autentica√ß√£o**: Verifica **quem** voc√™ √© (identidade)
    - **Autoriza√ß√£o**: Determina **o que** voc√™ pode fazer (permiss√µes)

    ### M√©todos de Autentica√ß√£o em APIs

    #### 1. Autentica√ß√£o por Token
    O cliente recebe um token ap√≥s login bem-sucedido e o envia em cada requisi√ß√£o:

    ```
    POST /login
    {
        "email": "usuario@exemplo.com",
        "senha": "senha123"
    }

    Resposta:
    {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    }

    // Nas pr√≥ximas requisi√ß√µes:
    GET /recursos
    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ```

    #### 2. Autentica√ß√£o por API Key
    O cliente recebe uma chave √∫nica que identifica a aplica√ß√£o:

    ```
    GET /recursos?api_key=a1b2c3d4e5f6g7h8i9j0

    // ou

    GET /recursos
    X-API-Key: a1b2c3d4e5f6g7h8i9j0
    ```

    #### 3. Autentica√ß√£o B√°sica HTTP
    O cliente envia nome de usu√°rio e senha em cada requisi√ß√£o:

    ```
    GET /recursos
    Authorization: Basic dXN1YXJpbzpzZW5oYTEyMw==
    ```

    O valor √© a codifica√ß√£o Base64 de "usuario:senha123".

    #### 4. OAuth 2.0
    Um protocolo mais complexo para autoriza√ß√£o delegada:

    ```
    // Passo 1: Redirecionamento para autentica√ß√£o
    GET /auth?client_id=app123&redirect_uri=https://app.com/callback&response_type=code

    // Passo 2: Ap√≥s login, receber c√≥digo de autoriza√ß√£o
    GET https://app.com/callback?code=a1b2c3...

    // Passo 3: Trocar c√≥digo por token
    POST /token
    {
        "code": "a1b2c3...",
        "client_id": "app123",
        "client_secret": "secret456",
        "grant_type": "authorization_code"
    }

    // Passo 4: Usar o token para acessar recursos
    GET /recursos
    Authorization: Bearer xyz789...
    ```

    ### Implementando Autentica√ß√£o por Token em Flask

    ```python
    import secrets
    from functools import wraps
    from flask import request, jsonify

    # Simula√ß√£o de banco de dados de tokens
    tokens_validos = {}  # token -> user_id

    # Fun√ß√£o decoradora para proteger rotas
    def requer_autenticacao(f):
        @wraps(f)
        def decorada(*args, **kwargs):
            # Obter token do cabe√ßalho
            auth_header = request.headers.get('Authorization')
            if not auth_header or not auth_header.startswith('Bearer '):
                return jsonify({"erro": "Token n√£o fornecido"}), 401

            token = auth_header.split(' ')[1]
            if token not in tokens_validos:
                return jsonify({"erro": "Token inv√°lido"}), 401

            # Adicionar ID do usu√°rio aos argumentos
            user_id = tokens_validos[token]
            return f(user_id, *args, **kwargs)

        return decorada

    # Rota de login
    @app.route("/login", methods=["POST"])
    def login():
        dados = request.json
        # Aqui voc√™ verificaria as credenciais no banco de dados
        # ...

        # Gerar e armazenar token
        token = secrets.token_hex(16)
        tokens_validos[token] = user_id

        return jsonify({"token": token})

    # Rota protegida
    @app.route("/perfil", methods=["GET"])
    @requer_autenticacao
    def perfil(user_id):
        # O user_id √© injetado pelo decorador
        # Buscar dados do usu√°rio no banco
        # ...
        return jsonify({"mensagem": f"Dados do usu√°rio {user_id}"})
    ```
    """)

    display_note("Tokens JWT (JSON Web Tokens) s√£o uma op√ß√£o popular para autentica√ß√£o em APIs. Eles s√£o auto-contidos, ou seja, carregam informa√ß√µes do usu√°rio dentro do pr√≥prio token, evitando consultas ao banco de dados a cada requisi√ß√£o.")

    # Lembrete para pausa
    display_break_reminder()

    # Se√ß√£o 4: Prote√ß√£o contra Ataques Comuns
    st.markdown("## 8.4. Prote√ß√£o contra Ataques Comuns")

    st.markdown("""
    Vamos explorar alguns ataques comuns contra APIs e como se proteger:

    ### 1. Inje√ß√£o SQL

    **O ataque**: O atacante insere c√≥digo SQL malicioso nos par√¢metros da requisi√ß√£o.

    **Exemplo vulner√°vel**:
    ```python
    @app.route("/usuarios/<nome>")
    def buscar_usuario(nome):
        query = f"SELECT * FROM usuarios WHERE nome = '{nome}'"
        # Se nome = "'; DROP TABLE usuarios; --", temos um problema!
    ```

    **Prote√ß√£o**:
    ```python
    @app.route("/usuarios/<nome>")
    def buscar_usuario(nome):
        query = "SELECT * FROM usuarios WHERE nome = ?"
        cursor.execute(query, (nome,))  # Par√¢metros s√£o escapados automaticamente
    ```

    ### 2. Cross-Site Scripting (XSS)

    **O ataque**: O atacante insere c√≥digo JavaScript que ser√° executado no navegador do usu√°rio.

    **Exemplo vulner√°vel**:
    ```python
    @app.route("/perfil/<nome>")
    def perfil(nome):
        return f"<h1>Perfil de {nome}</h1>"
        # Se nome = "<script>alert('Hackeado!')</script>", o script ser√° executado

    ```
    """)

if __name__ == "__main__":
    main()