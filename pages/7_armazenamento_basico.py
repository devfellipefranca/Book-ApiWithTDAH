import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder, display_interactive_practice
from utils.code_examples import JSON_STORAGE

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Armazenamento B√°sico | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("7. Armazenamento B√°sico")

    st.markdown("""
    At√© agora, nossas APIs armazenam dados apenas na mem√≥ria. Para aplica√ß√µes reais,
    precisamos de um armazenamento persistente. Neste cap√≠tulo, vamos explorar formas simples
    de armazenar dados em arquivos.
    """)

    # Se√ß√£o 1: Por que precisamos de armazenamento persistente
    st.markdown("## 7.1. Por que precisamos de armazenamento persistente?")

    st.markdown("""
    Imagine que voc√™ desenvolve uma API para um aplicativo de lista de tarefas:

    1. Um usu√°rio cria v√°rias tarefas atrav√©s da API
    2. O servidor armazena essas tarefas em uma vari√°vel na mem√≥ria
    3. Mais tarde, o servidor √© reiniciado (por uma atualiza√ß√£o ou erro)
    4. Todas as tarefas s√£o perdidas!

    O armazenamento persistente resolve esse problema salvando os dados em um local
    que n√£o √© afetado pelo rein√≠cio do servidor.

    ### Tipos de armazenamento persistente

    Existem v√°rias op√ß√µes, com diferentes n√≠veis de complexidade:

    1. **Arquivos simples**: TXT, CSV, JSON
        - F√°ceis de implementar
        - Bons para aplica√ß√µes pequenas
        - Limitados em performance e concorr√™ncia

    2. **Bancos de dados leves**: SQLite
        - N√£o requerem servidor separado
        - Oferecem recursos SQL
        - Bons para aplica√ß√µes m√©dias

    3. **Bancos de dados completos**: MySQL, PostgreSQL, MongoDB
        - Requerem servidor separado
        - Alta performance e funcionalidades avan√ßadas
        - Escal√°veis para grandes aplica√ß√µes

    Neste cap√≠tulo, focaremos em arquivos simples, especialmente JSON, que s√£o
    perfeitos para come√ßar e entender os conceitos b√°sicos de persist√™ncia.
    """)

    display_note("O tipo de armazenamento que voc√™ escolhe deve ser baseado nas necessidades da sua aplica√ß√£o. Nem sempre o mais avan√ßado √© o melhor! Para muitas APIs pequenas, um arquivo JSON √© mais que suficiente.")

    # Se√ß√£o 2: Armazenamento em Arquivos JSON
    st.markdown("## 7.2. Armazenamento em Arquivos JSON")

    st.markdown("""
    O JSON (JavaScript Object Notation) √© um formato leve de troca de dados que √© f√°cil
    para humanos lerem e escreverem e f√°cil para m√°quinas analisarem e gerarem.

    ### Vantagens do JSON para armazenamento simples

    1. **Formato nativo para APIs**: As APIs j√° trabalham com JSON, ent√£o n√£o h√° convers√£o complexa
    2. **Legibilidade**: Voc√™ pode abrir e entender o arquivo facilmente
    3. **Flexibilidade**: Armazena estruturas de dados complexas sem esquema r√≠gido
    4. **Suporte nativo em Python**: A biblioteca `json` j√° vem com Python

    ### Opera√ß√µes b√°sicas com arquivos JSON em Python

    ```python
    import json

    # Lendo um arquivo JSON
    def ler_dados():
        try:
            with open("dados.json", "r") as arquivo:
                return json.load(arquivo)
        except (FileNotFoundError, json.JSONDecodeError):
            # Se o arquivo n√£o existir ou estiver vazio/corrompido
            return []

    # Escrevendo em um arquivo JSON
    def salvar_dados(dados):
        with open("dados.json", "w") as arquivo:
            json.dump(dados, arquivo, indent=4)

    # Exemplo de uso
    # Ler dados existentes
    tarefas = ler_dados()

    # Adicionar uma nova tarefa
    nova_tarefa = {
        "id": len(tarefas) + 1,
        "titulo": "Aprender sobre APIs",
        "concluida": False
    }
    tarefas.append(nova_tarefa)

    # Salvar dados atualizados
    salvar_dados(tarefas)
    ```

    ### Estruturando os dados em arquivos JSON

    Os dados em arquivos JSON geralmente s√£o estruturados como:

    1. **Lista de objetos**: Para cole√ß√µes do mesmo tipo
    ```json
    [
        {"id": 1, "nome": "Item 1"},
        {"id": 2, "nome": "Item 2"}
    ]
    ```

    2. **Objeto com listas**: Para m√∫ltiplas cole√ß√µes
    ```json
    {
        "usuarios": [
            {"id": 1, "nome": "Usu√°rio 1"},
            {"id": 2, "nome": "Usu√°rio 2"}
        ],
        "produtos": [
            {"id": 1, "nome": "Produto 1"},
            {"id": 2, "nome": "Produto 2"}
        ]
    }
    ```
    """)

if __name__ == "__main__":
    main()