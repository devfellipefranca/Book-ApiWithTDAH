import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_code_with_explanation, display_encouragement, display_break_reminder
from utils.code_examples import HELLO_WORLD

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Introdu√ß√£o | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("1. Introdu√ß√£o √† Programa√ß√£o e APIs")
    
    st.markdown("""
    Bem-vindo ao primeiro cap√≠tulo da nossa jornada! Vamos come√ßar entendendo os conceitos b√°sicos
    que ser√£o o alicerce para tudo que vamos aprender. N√£o se preocupe se alguns termos parecerem
    estranhos agora - iremos explorar cada um deles com calma.
    """)
    
    # Se√ß√£o 1: O que √© Programa√ß√£o
    st.markdown("## 1.1. O que √© Programa√ß√£o?")
    
    st.markdown("""
    **Programa√ß√£o** √© como dar instru√ß√µes para um computador fazer algo. Imagine que voc√™ est√°
    ensinando uma receita para algu√©m que nunca cozinhou na vida e que segue exatamente o que
    voc√™ diz, sem improvisar:
    
    - "Pegue dois ovos"
    - "Quebre-os em uma tigela"
    - "Bata os ovos at√© ficarem homog√™neos"
    
    A programa√ß√£o funciona de forma similar: voc√™ escreve uma sequ√™ncia de instru√ß√µes precisas
    que o computador vai seguir na ordem exata que voc√™ determinar. Essas instru√ß√µes s√£o escritas
    em linguagens de programa√ß√£o.
    
    ### Linguagens de Programa√ß√£o
    
    S√£o idiomas especiais criados para nos comunicarmos com computadores. Assim como existem
    portugu√™s, ingl√™s e espanhol para comunica√ß√£o entre pessoas, existem Python, JavaScript,
    Java e muitas outras linguagens para nos comunicarmos com m√°quinas.
    
    Neste livro, vamos usar **Python** - uma linguagem conhecida por ser:
    
    - F√°cil de aprender e ler
    - Muito parecida com a linguagem humana
    - Amplamente usada em desenvolvimento web e APIs
    - Vers√°til para diferentes tipos de aplica√ß√µes
    
    ### Vamos ver como √© um programa simples em Python:
    """)
    
    display_code_with_explanation(
        HELLO_WORLD,
        """
        Este √© o c√≥digo mais b√°sico que podemos escrever em Python:
        
        `print("Ol√°, Mundo!")` - Esta linha est√° dizendo ao computador: "Mostre a mensagem 'Ol√°, Mundo!' na tela". 
        
        - `print` √© uma fun√ß√£o (um comando) que exibe mensagens
        - As aspas `"..."` indicam um texto (chamado de string em programa√ß√£o)
        - Os par√™nteses `(...)` cont√™m o que queremos mostrar
        
        Este simples programa j√° tem todos os ingredientes b√°sicos da programa√ß√£o: damos uma instru√ß√£o 
        clara para o computador executar!
        """
    )
    
    # Pausa para reflex√£o
    display_encouragement()
    
    # Se√ß√£o 2: O que s√£o APIs
    st.markdown("## 1.2. O que s√£o APIs?")
    
    st.markdown("""
    Agora que sabemos o que √© programa√ß√£o, vamos entender o que s√£o APIs.
    
    **API** significa **Interface de Programa√ß√£o de Aplica√ß√µes** (Application Programming Interface). 
    Parece complicado, mas o conceito √© mais simples do que o nome sugere.
    
    ### Usando uma analogia:
    
    Imagine um restaurante:
    - Voc√™ (cliente) n√£o vai at√© a cozinha preparar sua pr√≥pria comida
    - Em vez disso, voc√™ faz seu pedido atrav√©s de um gar√ßom
    - O gar√ßom leva seu pedido para a cozinha
    - Os cozinheiros preparam a comida
    - O gar√ßom traz o prato pronto para voc√™
    
    Nessa analogia:
    - A **cozinha** √© como um sistema ou banco de dados
    - O **gar√ßom** √© a API
    - O **menu** √© a documenta√ß√£o da API
    - Voc√™ √© o **desenvolvedor** querendo usar um servi√ßo
    
    A API √© um intermedi√°rio que permite que diferentes sistemas se comuniquem entre si de forma organizada. 
    Ela define quais pedidos podem ser feitos, como fazer esses pedidos e qual formato de resposta esperar.
    
    ### Por que as APIs s√£o importantes?
    
    1. **Acesso a recursos externos**: Permitem que seu programa use dados ou funcionalidades de outros servi√ßos
    2. **Ocultam complexidade**: Voc√™ n√£o precisa saber como o sistema funciona internamente
    3. **Padroniza√ß√£o**: Estabelecem regras claras para comunica√ß√£o entre sistemas
    4. **Seguran√ßa**: Controlam quem pode acessar quais dados e como
    
    ### Exemplos do dia a dia:
    
    - Quando um aplicativo de clima mostra a previs√£o do tempo, ele est√° usando uma API de servi√ßo meteorol√≥gico
    - Quando voc√™ faz login em um site usando sua conta do Google, o site est√° usando a API do Google
    - Quando voc√™ faz um pagamento online, o site est√° se comunicando com a API do banco ou servi√ßo de pagamento
    """)
    
    display_note("As APIs est√£o em toda parte no mundo digital, mesmo que voc√™ n√£o perceba. Na verdade, a maioria dos aplicativos que voc√™ usa diariamente depende de v√°rias APIs para funcionar!")
    
    # Se√ß√£o 3: Tipos de APIs
    st.markdown("## 1.3. Tipos de APIs")
    
    st.markdown("""
    Existem diferentes tipos de APIs, cada uma com suas caracter√≠sticas e prop√≥sitos espec√≠ficos:
    
    ### 1. APIs Web (REST, GraphQL, SOAP)
    
    S√£o as mais comuns e permitem a comunica√ß√£o atrav√©s da internet usando o protocolo HTTP.
    
    - **REST** (Representational State Transfer): 
      - √â o tipo mais usado atualmente
      - Utiliza m√©todos HTTP padr√£o (GET, POST, PUT, DELETE)
      - F√°cil de entender e implementar
      - O que vamos focar neste livro!
    
    - **GraphQL**:
      - Mais moderna e flex√≠vel
      - Permite que o cliente especifique exatamente quais dados quer receber
      - √ötil para aplica√ß√µes complexas com muitos tipos de dados inter-relacionados
    
    - **SOAP** (Simple Object Access Protocol):
      - Mais antiga e estruturada
      - Usa XML para formata√ß√£o de mensagens
      - Geralmente mais verbosa e complexa que REST
    
    ### 2. APIs de Biblioteca/Framework
    
    S√£o conjuntos de fun√ß√µes e procedimentos que voc√™ pode usar no seu c√≥digo:
    
    - A biblioteca padr√£o do Python (como `math`, `datetime`, etc.)
    - Frameworks como Django ou Flask para criar aplica√ß√µes web
    
    ### 3. APIs de Sistema Operacional
    
    Permitem que os programas interajam com o sistema operacional:
    
    - Acesso a arquivos
    - Gest√£o de processos
    - Opera√ß√µes de rede
    """)
    
    # Se√ß√£o 4: Como funcionam as APIs Web
    st.markdown("## 1.4. Como funcionam as APIs Web")
    
    st.markdown("""
    Como vamos focar em APIs Web (especificamente REST) neste livro, vamos entender melhor como elas funcionam:
    
    ### O modelo Cliente-Servidor
    
    1. **Cliente**: Quem faz a solicita√ß√£o (request)
       - Pode ser um navegador, um aplicativo mobile, ou outro sistema
    
    2. **Servidor**: Quem responde √† solicita√ß√£o (response)
       - Processa o pedido
       - Acessa dados conforme necess√°rio
       - Retorna uma resposta
    
    ### O fluxo b√°sico:
    
    1. O cliente envia uma **requisi√ß√£o** para um **endpoint** (um URL espec√≠fico)
    2. A requisi√ß√£o inclui um **m√©todo HTTP** (GET, POST, etc.) que indica a a√ß√£o desejada
    3. O servidor processa a requisi√ß√£o
    4. O servidor envia uma **resposta** que cont√©m:
       - Um **c√≥digo de status** (como 200 para sucesso, 404 para "n√£o encontrado")
       - Os **dados** solicitados (geralmente em formato JSON ou XML)
    5. O cliente recebe e processa a resposta
    
    ### Um exemplo pr√°tico:
    
    Imagine um app de lista de tarefas:
    
    1. Para **ver todas as tarefas**:
       - Requisi√ß√£o: `GET /tarefas`
       - Resposta: Lista de tarefas em formato JSON
    
    2. Para **adicionar uma nova tarefa**:
       - Requisi√ß√£o: `POST /tarefas` com dados da tarefa no corpo
       - Resposta: Confirma√ß√£o de cria√ß√£o e dados da nova tarefa
    
    3. Para **atualizar uma tarefa**:
       - Requisi√ß√£o: `PUT /tarefas/42` com novos dados
       - Resposta: Dados atualizados da tarefa
    
    4. Para **excluir uma tarefa**:
       - Requisi√ß√£o: `DELETE /tarefas/42`
       - Resposta: Confirma√ß√£o de exclus√£o
    
    Este modelo de intera√ß√£o √© poderoso porque √© simples, stateless (n√£o guarda estado entre requisi√ß√µes) 
    e permite que diferentes sistemas se comuniquem independentemente de como foram implementados internamente.
    """)
    
    display_tip("Pense nas APIs como contratos: elas definem como dois sistemas devem se comunicar, mas n√£o como cada sistema funciona internamente. Isso permite que cada lado evolua independentemente, desde que mantenha o 'contrato' da API.")
    
    # Lembrete para pausa
    display_break_reminder()
    
    # Se√ß√£o 5: Por que aprender sobre APIs
    st.markdown("## 1.5. Por que aprender sobre APIs?")
    
    st.markdown("""
    Agora que sabemos o que s√£o APIs e como funcionam, por que √© importante aprender a cri√°-las? Existem v√°rios motivos:
    
    ### 1. Habilidade muito valorizada no mercado
    
    A cria√ß√£o de APIs √© uma das habilidades mais procuradas para desenvolvedores backend. Muitas empresas 
    precisam de pessoas que saibam construir e manter APIs robustas para seus produtos e servi√ßos.
    
    ### 2. Base para aplica√ß√µes modernas
    
    A maioria das aplica√ß√µes modernas s√£o constru√≠das como:
    - **Frontend**: A interface que os usu√°rios veem e interagem
    - **Backend**: A l√≥gica e processamento de dados que acontece no servidor
    - **API**: A ponte que conecta os dois
    
    Ao aprender a construir APIs, voc√™ entende como esses componentes se comunicam e pode trabalhar em qualquer parte desse ecossistema.
    
    ### 3. Integra√ß√£o de sistemas
    
    As APIs permitem que diferentes sistemas se comuniquem. Essa habilidade √© crucial para:
    - Conectar servi√ßos internos de uma empresa
    - Integrar com servi√ßos externos (pagamentos, mapas, redes sociais)
    - Criar automa√ß√µes entre diferentes ferramentas
    
    ### 4. Amplia√ß√£o de possibilidades
    
    Quando voc√™ cria uma API para seu servi√ßo:
    - Outros desenvolvedores podem construir sobre seu trabalho
    - √â poss√≠vel ter diferentes interfaces (web, mobile, desktop) usando o mesmo backend
    - Voc√™ pode escalar diferentes partes do sistema independentemente
    
    ### 5. Compreens√£o do ecossistema digital
    
    Entender APIs te d√° uma vis√£o mais clara de como a internet e os servi√ßos digitais funcionam nos bastidores, 
    mesmo que voc√™ n√£o trabalhe diretamente com elas no futuro.
    """)
    
    # Se√ß√£o 6: Nossa jornada de aprendizado
    st.markdown("## 1.6. Nossa jornada de aprendizado")
    
    st.markdown("""
    Neste livro, vamos seguir um caminho estruturado para aprender a criar APIs do zero:
    
    1. Come√ßaremos com os **fundamentos da programa√ß√£o** em Python
    2. Aprenderemos sobre **estruturas de dados** essenciais
    3. Daremos os **primeiros passos** criando APIs simples
    4. Entenderemos os **m√©todos HTTP** e como us√°-los
    5. Aprenderemos a **manipular dados** recebidos e enviados
    6. Implementaremos **armazenamento** para nossas APIs
    7. Abordaremos **valida√ß√£o e seguran√ßa**
    8. Criaremos **APIs mais avan√ßadas** com bancos de dados
    9. Desenvolveremos um **projeto final** completo
    
    Ao longo dessa jornada, vamos construir exemplos pr√°ticos e √∫teis, sempre explicando cada passo 
    do processo. Nosso foco ser√° em aprender de forma gradual, sem sobrecarregar com muita informa√ß√£o de uma vez.
    """)
    
    display_note("Este livro foi especialmente projetado para pessoas com TDAH. Por isso, usamos exemplos concretos, dividimos o conte√∫do em partes gerenci√°veis e inclu√≠mos lembretes para pausas. Se algum conceito parecer dif√≠cil, n√£o se preocupe - vamos revisit√°-lo de diferentes maneiras ao longo do livro.")
    
    # Se√ß√£o 7: Conclus√£o e prepara√ß√£o
    st.markdown("## 1.7. Preparando-se para a jornada")
    
    st.markdown("""
    Antes de avan√ßarmos para o pr√≥ximo cap√≠tulo, vamos garantir que voc√™ est√° pronto para come√ßar:
    
    ### O que voc√™ vai precisar:
    
    1. **Um computador** com acesso √† internet
    2. **Python instalado** - usaremos a vers√£o 3.6 ou superior
    3. **Um editor de c√≥digo** - recomendamos VSCode, PyCharm ou at√© mesmo o Jupyter Notebook para iniciantes
    4. **Paci√™ncia e curiosidade** - as habilidades mais importantes para aprender programa√ß√£o!
    
    ### Dicas para um aprendizado eficaz:
    
    - **Pratique ativamente**: N√£o apenas leia o c√≥digo, digite-o e experimente modific√°-lo
    - **Fa√ßa pausas regulares**: A cada 25-30 minutos, levante-se e descanse por 5 minutos
    - **Experimente por conta pr√≥pria**: Tente resolver os desafios antes de olhar as respostas
    - **N√£o se compare aos outros**: Cada pessoa tem seu pr√≥prio ritmo de aprendizado
    - **Celebre pequenas vit√≥rias**: Cada novo conceito aprendido √© uma conquista!
    
    No pr√≥ximo cap√≠tulo, vamos come√ßar com os fundamentos b√°sicos da programa√ß√£o em Python.
    Mal posso esperar para continuar essa jornada com voc√™!
    """)
    
    display_encouragement()
    
    # Navega√ß√£o entre cap√≠tulos
    display_chapter_navigation(None, "2_fundamentos_basicos")

if __name__ == "__main__":
    main()
