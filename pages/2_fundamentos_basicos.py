import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder, display_interactive_practice
from utils.code_examples import VARIABLES_EXAMPLE, CONDITIONAL_EXAMPLE, LOOP_EXAMPLE, FUNCTION_EXAMPLE

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Fundamentos B√°sicos | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    # T√≠tulo principal
    st.title("2. Fundamentos B√°sicos")

    st.markdown("""
    Neste cap√≠tulo, vamos aprender os blocos fundamentais da programa√ß√£o. 
    Esses conceitos s√£o a base de tudo que construiremos ao longo do livro.

    Vamos come√ßar com os elementos mais simples e gradualmente avan√ßar para 
    estruturas mais complexas. N√£o se preocupe - vamos dar um passo de cada vez!
    """)

    # Se√ß√£o 1: Vari√°veis e Tipos de Dados
    st.markdown("## 2.1. Vari√°veis e Tipos de Dados")

    st.markdown("""
    ### O que s√£o vari√°veis?

    **Vari√°veis** s√£o como caixas etiquetadas onde guardamos informa√ß√µes no programa. 
    Essas informa√ß√µes podem ser n√∫meros, textos, listas ou outros tipos de dados.

    **Pense assim:** Se voc√™ precisa lembrar o nome de um usu√°rio da sua API para 
    cumpriment√°-lo mais tarde, voc√™ guarda esse nome em uma vari√°vel.

    Em Python, criamos vari√°veis de forma simples:

    ```python
    nome = "Maria"
    ```

    Neste exemplo:
    - `nome` √© o nome da vari√°vel (a etiqueta da caixa)
    - `=` √© o operador de atribui√ß√£o (coloca o valor dentro da caixa)
    - `"Maria"` √© o valor armazenado (o conte√∫do da caixa)

    ### Principais tipos de dados em Python

    Python tem v√°rios tipos de dados embutidos. Os mais comuns s√£o:

    1. **Strings (str)** - Textos:
       ```python
       nome = "Carlos"
       mensagem = 'Ol√°, mundo!'
       ```

    2. **Inteiros (int)** - N√∫meros inteiros:
       ```python
       idade = 25
       quantidade = -10
       ```

    3. **N√∫meros de ponto flutuante (float)** - N√∫meros decimais:
       ```python
       altura = 1.75
       temperatura = -2.5
       ```

    4. **Booleanos (bool)** - Valores verdadeiro/falso:
       ```python
       esta_ativo = True
       tarefa_concluida = False
       ```

    5. **Listas (list)** - Cole√ß√µes ordenadas de itens:
       ```python
       frutas = ["ma√ß√£", "banana", "laranja"]
       numeros = [1, 2, 3, 4, 5]
       ```

    6. **Dicion√°rios (dict)** - Cole√ß√µes de pares chave-valor:
       ```python
       pessoa = {"nome": "Ana", "idade": 30, "profissao": "Desenvolvedora"}
       ```

    7. **Nenhum (None)** - Representa a aus√™ncia de valor:
       ```python
       resultado = None
       ```

    Vamos ver um exemplo que utiliza diferentes tipos de vari√°veis:
    """)

    display_code_with_explanation(
        VARIABLES_EXAMPLE,
        """
        Neste exemplo:

        1. Criamos quatro vari√°veis com diferentes tipos de dados:
           - `nome`: uma string (texto)
           - `idade`: um inteiro (n√∫mero inteiro)
           - `altura`: um float (n√∫mero decimal)
           - `is_programadora`: um booleano (verdadeiro/falso)

        2. Depois usamos a fun√ß√£o `print()` para exibir essas vari√°veis.
           - Observe o uso de `f-strings` (o `f` antes das aspas) que permite incluir vari√°veis diretamente no texto usando `{variavel}`

        Este tipo de c√≥digo √© comum em APIs quando precisamos armazenar informa√ß√µes temporariamente antes de process√°-las ou envi√°-las como resposta.
        """
    )

    display_tip("As vari√°veis em Python s√£o din√¢micas - isso significa que o mesmo nome de vari√°vel pode armazenar diferentes tipos de dados em momentos diferentes. Por√©m, √© uma boa pr√°tica manter o tipo consistente para evitar confus√£o.")

    # Pausa para reflex√£o
    display_encouragement()

    # Se√ß√£o 2: Operadores
    st.markdown("## 2.2. Operadores")

    st.markdown("""
    Os operadores s√£o s√≠mbolos especiais que realizam opera√ß√µes em vari√°veis e valores.

    ### Operadores Aritm√©ticos

    Usados para opera√ß√µes matem√°ticas b√°sicas:

    - `+` : Adi√ß√£o (`5 + 3` resulta em `8`)
    - `-` : Subtra√ß√£o (`5 - 3` resulta em `2`)
    - `*` : Multiplica√ß√£o (`5 * 3` resulta em `15`)
    - `/` : Divis√£o (`5 / 2` resulta em `2.5`)
    - `//`: Divis√£o inteira (`5 // 2` resulta em `2`)
    - `%` : M√≥dulo (resto da divis√£o) (`5 % 2` resulta em `1`)
    - `**`: Exponencia√ß√£o (`5 ** 2` resulta em `25`)

    ### Operadores de Compara√ß√£o

    Usados para comparar valores:

    - `==`: Igual a (`5 == 5` √© `True`)
    - `!=`: Diferente de (`5 != 3` √© `True`)
    - `>` : Maior que (`5 > 3` √© `True`)
    - `<` : Menor que (`5 < 3` √© `False`)
    - `>=`: Maior ou igual a (`5 >= 5` √© `True`)
    - `<=`: Menor ou igual a (`5 <= 3` √© `False`)

    ### Operadores L√≥gicos

    Usados para combinar condi√ß√µes:

    - `and`: Retorna `True` se ambas as condi√ß√µes forem verdadeiras
      ```python
      (5 > 3) and (10 < 20)  # True
      ```

    - `or`: Retorna `True` se pelo menos uma das condi√ß√µes for verdadeira
      ```python
      (5 < 3) or (10 < 20)  # True
      ```

    - `not`: Inverte o resultado (verdadeiro vira falso, falso vira verdadeiro)
      ```python
      not (5 < 3)  # True
      ```

    ### Operadores de Atribui√ß√£o

    Usados para atribuir valores a vari√°veis:

    - `=`: Atribui√ß√£o simples (`x = 5`)
    - `+=`: Atribui√ß√£o com adi√ß√£o (`x += 3` √© o mesmo que `x = x + 3`)
    - `-=`: Atribui√ß√£o com subtra√ß√£o (`x -= 3` √© o mesmo que `x = x - 3`)
    - `*=`: Atribui√ß√£o com multiplica√ß√£o (`x *= 3` √© o mesmo que `x = x * 3`)
    - `/=`: Atribui√ß√£o com divis√£o (`x /= 3` √© o mesmo que `x = x / 3`)

    ### Exemplo pr√°tico com operadores:

    ```python
    # Operadores aritm√©ticos
    preco_produto = 50.0
    quantidade = 3
    total = preco_produto * quantidade
    print(f"Total da compra: R${total}")  # Total da compra: R$150.0

    # Verificando desconto
    tem_desconto = total > 100
    print(f"Cliente tem direito a desconto? {tem_desconto}")  # True

    # Aplicando desconto se o valor for alto E o cliente for premium
    valor_alto = total > 100
    cliente_premium = True

    if valor_alto and cliente_premium:
        total -= 15  # Desconto de R$15 (usando operador de atribui√ß√£o -=)

    print(f"Total final ap√≥s poss√≠veis descontos: R${total}")  # R$135.0
    ```

    Em uma API, frequentemente usamos operadores para:
    - Calcular valores (como totais, m√©dias, porcentagens)
    - Verificar condi√ß√µes (se um usu√°rio tem permiss√£o, se um valor est√° dentro de limites)
    - Combinar dados de diferentes fontes
    """)

    # Se√ß√£o 3: Estruturas Condicionais
    st.markdown("## 2.3. Estruturas Condicionais")

    st.markdown("""
    As estruturas condicionais permitem que seu programa tome decis√µes baseadas em condi√ß√µes.

    ### if, elif, else

    A estrutura b√°sica √©:

    ```python
    if condi√ß√£o:
        # c√≥digo executado se a condi√ß√£o for verdadeira
    elif outra_condi√ß√£o:
        # c√≥digo executado se a primeira condi√ß√£o for falsa e esta for verdadeira
    else:
        # c√≥digo executado se todas as condi√ß√µes anteriores forem falsas
    ```

    **Nota importante:** Em Python, a indenta√ß√£o (os espa√ßos no in√≠cio de cada linha) √© obrigat√≥ria e determina
    quais linhas pertencem a cada bloco de c√≥digo.
    """)

    display_code_with_explanation(
        CONDITIONAL_EXAMPLE,
        """
        Neste exemplo:

        1. Criamos uma vari√°vel `idade` com o valor `18`

        2. Usamos uma estrutura condicional `if` para verificar se a idade √© maior ou igual a 18:
           - Se for verdadeiro (como √© neste caso), o programa exibe "Voc√™ √© maior de idade!"
           - Se fosse falso, o programa exibiria "Voc√™ √© menor de idade."

        Nas APIs, usamos condicionais para:
        - Verificar se um usu√°rio tem permiss√£o para acessar um recurso
        - Validar se os dados recebidos s√£o v√°lidos
        - Decidir qual resposta enviar baseado em diferentes situa√ß√µes
        """
    )

    st.markdown("""
    ### Exemplo mais complexo:

    ```python
    # Verifica√ß√£o de acesso em uma API
    nivel_acesso = "admin"
    recurso_solicitado = "dados_financeiros"

    if nivel_acesso == "admin":
        print("Acesso total concedido.")
    elif nivel_acesso == "gerente" and recurso_solicitado != "dados_financeiros":
        print("Acesso parcial concedido.")
    elif nivel_acesso == "usuario" and recurso_solicitado == "perfil_pessoal":
        print("Acesso limitado concedido.")
    else:
        print("Acesso negado.")
    ```

    Este tipo de verifica√ß√£o √© extremamente comum em APIs para controlar quem pode acessar quais recursos.
    """)

    display_tip("Voc√™ pode encadear quantos `elif` precisar, mas tente manter a estrutura simples. Se sua condi√ß√£o estiver ficando muito complexa, considere dividir em fun√ß√µes menores ou usar uma estrutura diferente.")

    # Lembrete para pausa
    display_break_reminder()

    # Se√ß√£o 4: Estruturas de Repeti√ß√£o (Loops)
    st.markdown("## 2.4. Estruturas de Repeti√ß√£o (Loops)")

    st.markdown("""
    Loops s√£o estruturas que permitem executar um bloco de c√≥digo repetidamente. Em Python, temos dois tipos principais:

    ### Loop for

    O loop `for` √© usado para iterar sobre uma sequ√™ncia (como lista, tupla, dicion√°rio, string) ou outros objetos iter√°veis.

    Sintaxe b√°sica:
    ```python
    for item in sequencia:
        # c√≥digo a ser executado para cada item
    ```

    ### Loop while

    O loop `while` executa um bloco de c√≥digo enquanto uma condi√ß√£o for verdadeira.

    Sintaxe b√°sica:
    ```python
    while condi√ß√£o:
        # c√≥digo a ser executado enquanto a condi√ß√£o for verdadeira
    ```

    Vamos ver exemplos de ambos:
    """)

    display_code_with_explanation(
        LOOP_EXAMPLE,
        """
        Este exemplo mostra duas formas de contar de 1 a 5:

        1. Usando o loop `for`:
           - `range(1, 6)` cria uma sequ√™ncia de n√∫meros de 1 at√© 5 (o √∫ltimo n√∫mero, 6, n√£o √© inclu√≠do)
           - Para cada n√∫mero nessa sequ√™ncia, o c√≥digo dentro do loop √© executado
           - A vari√°vel `numero` assume cada valor da sequ√™ncia, um de cada vez

        2. Usando o loop `while`:
           - Primeiro definimos `contador = 1` para come√ßar
           - Enquanto `contador <= 5` for verdadeiro, o c√≥digo dentro do loop √© executado
           - Dentro do loop, aumentamos o contador com `contador += 1` para evitar um loop infinito

        Em APIs, usamos loops para:
        - Processar m√∫ltiplos registros de um banco de dados
        - Iterar sobre itens em uma requisi√ß√£o (como uma lista de produtos em um pedido)
        - Realizar verifica√ß√µes repetitivas enquanto uma condi√ß√£o for atendida
        """
    )

    st.markdown("""
    ### Controle de Loop: break e continue

    √Äs vezes, precisamos de mais controle sobre nossos loops:

    - `break`: Interrompe completamente o loop
    - `continue`: Pula para a pr√≥xima itera√ß√£o do loop

    Exemplo:

    ```python
    # Processando uma lista de usu√°rios, mas pulando usu√°rios inativos
    usuarios = [
        {"id": 1, "nome": "Ana", "ativo": True},
        {"id": 2, "nome": "Bruno", "ativo": False},
        {"id": 3, "nome": "Carla", "ativo": True},
        {"id": 4, "nome": "Daniel", "ativo": True}
    ]

    print("Processando usu√°rios ativos:")
    for usuario in usuarios:
        if not usuario["ativo"]:
            print(f"Usu√°rio {usuario['nome']} inativo. Pulando...")
            continue

        print(f"Processando dados do usu√°rio {usuario['nome']}...")

        # Se encontrarmos o ID 3, interrompemos o loop
        if usuario["id"] == 3:
            print("Usu√°rio espec√≠fico encontrado. Interrompendo processamento.")
            break
    ```

    Este padr√£o √© comum em APIs quando estamos processando lotes de dados e precisamos lidar com casos especiais.
    """)

    display_warning("Cuidado com loops infinitos! Se um loop `while` nunca tiver sua condi√ß√£o alterada para `False`, ele continuar√° rodando para sempre e pode travar seu programa.")

    # Pausa para reflex√£o
    display_encouragement()

    # Se√ß√£o 5: Fun√ß√µes
    st.markdown("## 2.5. Fun√ß√µes")

    st.markdown("""
    Fun√ß√µes s√£o blocos de c√≥digo reutiliz√°veis que executam uma tarefa espec√≠fica. Elas s√£o fundamentais para organizar c√≥digo, evitar repeti√ß√£o e tornar o programa mais leg√≠vel.

    ### Definindo fun√ß√µes

    Em Python, definimos fun√ß√µes com a palavra-chave `def`:

    ```python
    def nome_da_funcao(parametro1, parametro2):
        # c√≥digo da fun√ß√£o
        return resultado
    ```

    - `def`: palavra-chave que indica o in√≠cio da defini√ß√£o de uma fun√ß√£o
    - `nome_da_funcao`: o nome que voc√™ escolhe para a fun√ß√£o
    - `parametro1, parametro2`: dados que a fun√ß√£o precisa para executar (opcionais)
    - `return`: palavra-chave para devolver um valor (opcional)
    """)

    display_code_with_explanation(
        FUNCTION_EXAMPLE,
        """
        Neste exemplo:

        1. Definimos uma fun√ß√£o chamada `saudacao` que:
           - Recebe um par√¢metro: `nome`
           - Tem um coment√°rio de documenta√ß√£o (docstring) entre aspas triplas que explica o que a fun√ß√£o faz
           - Retorna uma string personalizada de sauda√ß√£o

        2. Chamamos a fun√ß√£o com o argumento `"Ana"` e armazenamos o resultado na vari√°vel `mensagem`

        3. Exibimos a mensagem retornada

        Em APIs, usamos fun√ß√µes para:
        - Organizar c√≥digo para diferentes rotas e endpoints
        - Processar dados recebidos nas requisi√ß√µes
        - Formatar respostas para serem enviadas
        - Reutilizar l√≥gica comum em diferentes partes da aplica√ß√£o
        """
    )

    st.markdown("""
    ### Par√¢metros e Argumentos

    - **Par√¢metros** s√£o as vari√°veis listadas na defini√ß√£o da fun√ß√£o
    - **Argumentos** s√£o os valores reais que passamos para a fun√ß√£o

    Python oferece v√°rias formas de trabalhar com par√¢metros:

    #### Par√¢metros com valores padr√£o:

    ```python
    def saudacao(nome, mensagem="Ol√°"):
        return f"{mensagem}, {nome}!"

    # Podemos chamar de diferentes formas:
    print(saudacao("Maria"))            # Ol√°, Maria!
    print(saudacao("Jo√£o", "Bem-vindo")) # Bem-vindo, Jo√£o!
    ```
    """)

    # Adicione aqui o restante do seu c√≥digo, caso haja...
    

main()