
import streamlit as st
from utils.helpers import display_chapter_navigation, display_note, display_tip, display_warning, display_code_with_explanation, display_encouragement, display_break_reminder

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Projeto Final | APIs do Zero ao Avan√ßado",
    page_icon="üìö",
    layout="wide"
)

def main():
    st.title("10. Projeto Final: Sistema de Gerenciamento de Tarefas")

    st.markdown("""
    Chegou o momento de aplicar tudo que aprendemos! Vamos desenvolver uma API completa
    para um sistema de gerenciamento de tarefas com autentica√ß√£o, categorias e estat√≠sticas.

    ## Funcionalidades do Projeto

    1. **Autentica√ß√£o de Usu√°rios**
       - Registro
       - Login/Logout
       - Tokens JWT

    2. **Gerenciamento de Tarefas**
       - CRUD completo de tarefas
       - Filtros por status e categoria
       - Prioridades
       - Datas de cria√ß√£o e conclus√£o

    3. **Categorias**
       - CRUD de categorias
       - Cores personalizadas
       - Vincula√ß√£o com tarefas

    4. **Estat√≠sticas**
       - Total de tarefas
       - Tarefas por status
       - Distribui√ß√£o por categoria
       - Tempo m√©dio de conclus√£o

    ## Estrutura do Projeto

    ```
    projeto_final/
    ‚îú‚îÄ‚îÄ app.py           # Arquivo principal
    ‚îú‚îÄ‚îÄ config.py        # Configura√ß√µes
    ‚îú‚îÄ‚îÄ models/          # Modelos de dados
    ‚îú‚îÄ‚îÄ routes/          # Rotas da API
    ‚îú‚îÄ‚îÄ services/        # L√≥gica de neg√≥cio
    ‚îî‚îÄ‚îÄ utils/           # Fun√ß√µes auxiliares
    ```

    ## Tecnologias Utilizadas

    - Flask para a API
    - SQLite para o banco de dados
    - JWT para autentica√ß√£o
    - SQLAlchemy como ORM

    ## Implementa√ß√£o

    O c√≥digo completo do projeto est√° dispon√≠vel nos exemplos anteriores.
    Sugerimos que voc√™:

    1. Comece implementando a autentica√ß√£o
    2. Adicione o CRUD b√°sico de tarefas
    3. Implemente as categorias
    4. Adicione as estat√≠sticas
    5. Refine a API com valida√ß√µes e tratamento de erros

    ## Pr√≥ximos Passos

    Ap√≥s completar o projeto base, voc√™ pode expandir com:

    - Adicionar tags √†s tarefas
    - Implementar subtarefas
    - Criar lembretes/notifica√ß√µes
    - Adicionar compartilhamento de tarefas
    - Implementar hist√≥rico de altera√ß√µes
    """)

    display_encouragement()

if __name__ == "__main__":
    main()
